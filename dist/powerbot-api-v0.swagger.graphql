type addApiKey {
  name: String
  value: String!
}

type addInternalTrade {
  """
  If you sold energy with this trade, delivery_area will contain the sell_delivery_area, otherwise the buy_delivery_area
  """
  delivery_area: String!
  delivery_start: String
  delivery_end: String

  """The timestamp when the trade was executed (UTC time zone)"""
  exec_time: String!

  """the custom text of the buy order"""
  buy_txt: String

  """
  Indicates whether the executed order was a trade aggressor or trade originator.  
  * Y - Trade aggressor
  * N - Trade originator
  * U - Unknown, for executed orders of remote products and data before migration    
  """
  buy_aggressor_indicator: String

  """the custom text of the sell order"""
  sell_txt: String

  """
  Indicates whether the executed order was a trade aggressor or trade originator.  
  * Y - Trade aggressor
  * N - Trade originator
  * U - Unknown, for executed orders of remote products and data before migration    
  """
  sell_aggressor_indicator: String

  """The contract_id against which the trade was executed"""
  contract_id: String

  """Price of the trade"""
  price: Float!
  quantity: Float!
}

type addLogEntry {
  """default field"""
  empty: String
}

type addOrder {
  """
  the unique id of the order. **Note** if you modify an order, the id will change!
  """
  order_id: String

  """the time (UTC) when Powerbot received the last update of the order"""
  api_timestamp: String

  """
  The current state of the order in the system. 
  * HIBE: The order is entered into the backend system but not exposed to the market.
  * ACTI: The order is entered and immediately exposed to the market for execution.
  * IACT: The order is deleted.
  """
  state: String

  """Defines the delivery area of the order."""
  delivery_area: String
  last_change_timestamp: String

  """Set to true if the order is a BUY order, false otherwise"""
  buy: Boolean

  """set to true if the order is a SELL order, false otherwise"""
  sell: Boolean
  side: String

  """The contract_id of the order's underlying contract"""
  contract_id: String

  """The contract name of the order's underlying contract"""
  contract_name: String

  """the delivery start of the underlying contract."""
  delivery_start: String

  """the delivery end of the underlying contract."""
  delivery_end: String

  """The client's order number (if set during the placement of the order)"""
  clOrdrId: String

  """The client's custom text (if set during the placement of the order)"""
  txt: String

  """The price of the order in the contract's currency (usually EUR)"""
  price: Float

  """
  The quantity of the order (in the contract's quantity unit - usually MW)
  """
  quantity: Float

  """
  The action which has been carried out for the order
  * UADD: Order added by user.
  * UHIB: Order deactivated by user.
  * UMOD: Order modified by user.
  * UDEL: Order deleted by user.
  * UREJ: Pre-arranged order rejected by user.
  * AADD: Order added by market operations on behalf.
  * AHIB: Order deactivated by market operations on behalf. “AMOD”: Order modified by market operations on behalf.
  * ADEL: Order deleted by market operations on behalf.
  * AREJ: Pre-arranged order rejected by market operations on behalf.
  * SADD: Order added by the system.
  * SHIB: Order deactivated by the system. “SMOD”: Order modified by the system. “SDEL”: Order deleted by the system.
  * SREJ: Pre-arranged order rejected by system.
  * FEXE: Order is fully executed.
  * PEXE: Partial execution of order.
  * IADD: A new slice of an Iceberg order was added to the service.
  * QADD: Quote was added
  * QFEX: Quote was fully executed
  """
  action: String

  """
  All details of the order (as received from the underlying backend system)
  """
  details: addOrder_details

  """the epex user code"""
  user_code: String
}

"""
All details of the order (as received from the underlying backend system)
"""
type addOrder_details {
  """default field"""
  empty: String
}

type addOrders_items {
  """
  the unique id of the order. **Note** if you modify an order, the id will change!
  """
  order_id: String

  """the time (UTC) when Powerbot received the last update of the order"""
  api_timestamp: String

  """
  The current state of the order in the system. 
  * HIBE: The order is entered into the backend system but not exposed to the market.
  * ACTI: The order is entered and immediately exposed to the market for execution.
  * IACT: The order is deleted.
  """
  state: String

  """Defines the delivery area of the order."""
  delivery_area: String
  last_change_timestamp: String

  """Set to true if the order is a BUY order, false otherwise"""
  buy: Boolean

  """set to true if the order is a SELL order, false otherwise"""
  sell: Boolean
  side: String

  """The contract_id of the order's underlying contract"""
  contract_id: String

  """The contract name of the order's underlying contract"""
  contract_name: String

  """the delivery start of the underlying contract."""
  delivery_start: String

  """the delivery end of the underlying contract."""
  delivery_end: String

  """The client's order number (if set during the placement of the order)"""
  clOrdrId: String

  """The client's custom text (if set during the placement of the order)"""
  txt: String

  """The price of the order in the contract's currency (usually EUR)"""
  price: Float

  """
  The quantity of the order (in the contract's quantity unit - usually MW)
  """
  quantity: Float

  """
  The action which has been carried out for the order
  * UADD: Order added by user.
  * UHIB: Order deactivated by user.
  * UMOD: Order modified by user.
  * UDEL: Order deleted by user.
  * UREJ: Pre-arranged order rejected by user.
  * AADD: Order added by market operations on behalf.
  * AHIB: Order deactivated by market operations on behalf. “AMOD”: Order modified by market operations on behalf.
  * ADEL: Order deleted by market operations on behalf.
  * AREJ: Pre-arranged order rejected by market operations on behalf.
  * SADD: Order added by the system.
  * SHIB: Order deactivated by the system. “SMOD”: Order modified by the system. “SDEL”: Order deleted by the system.
  * SREJ: Pre-arranged order rejected by system.
  * FEXE: Order is fully executed.
  * PEXE: Partial execution of order.
  * IADD: A new slice of an Iceberg order was added to the service.
  * QADD: Quote was added
  * QFEX: Quote was fully executed
  """
  action: String

  """
  All details of the order (as received from the underlying backend system)
  """
  details: addOrders_items_details

  """the epex user code"""
  user_code: String
}

"""
All details of the order (as received from the underlying backend system)
"""
type addOrders_items_details {
  """default field"""
  empty: String
}

type findContracts_items {
  product: String

  """The contract's unique id"""
  contract_id: String
  revision_no: String
  state: String

  """The name of the contract"""
  name: String

  """The delivery start time (UTC) of the contract"""
  delivery_start: String

  """The delivery end time (UTC) of the contract"""
  delivery_end: String
  contract_details: findContracts_items_contract_details
  relative_position: Float
  absolute_position: Float
  signals: [findContracts_items_signals_items]
}

type findContracts_items_contract_details {
  """default field"""
  empty: String
}

type findContracts_items_signals_items {
  """
  The unique id of the signal (within the namespace of the emitting source)
  """
  id: String

  """The identifier of the system which emitted the signal"""
  source: String

  """The timestamp when the signal was received by PowerBot"""
  received_at: String

  """
  The number of times the signal has been updated. If the signal has never received any updates, then revision is 0.
  """
  revision: Int

  """
  Together with delivery_start and delivery_end specify the delivery period in which the signal is valid
  """
  delivery_start: String

  """
  Together with delivery_start and delivery_end specify the delivery period in which the signal is valid
  """
  delivery_end: String

  """The content of the signal"""
  value: findContracts_items_signals_items_value
}

"""The content of the signal"""
type findContracts_items_signals_items_value {
  """default field"""
  empty: String
}

type getContractHistory_items {
  """The timestamp as of the entry is valid"""
  as_of: String

  """The running revision number of the entry"""
  revisionNo: String
  delivery_area: String
  contract_id: String

  """The volume weighted average price at that time"""
  vwap: Float

  """The best bid's price at that time"""
  best_bid_price: Float

  """The best bid's quantity at that time"""
  best_bid_quantity: Float

  """The best ask's price at that time"""
  best_ask_price: Float

  """The best asks's quantity at that time"""
  best_ask_quantity: Float

  """The price of the last trade at that time"""
  last_price: Float

  """The quantity of the last trade at that time"""
  last_quantity: Float

  """The total volume of the contract ot that time"""
  total_quantity: Float
  auction_price: Float

  """
  Highest traded price since the start of the trading period at the current point in time.
  """
  high: Float

  """
  Lowest traded price since the start of the trading period at the current point in time.
  """
  low: Float

  """Signals valid as of the current point in time."""
  signals: [getContractHistory_items_signals_items]

  """Lists the trades which occurred since the previous point in time."""
  trades: [getContractHistory_items_trades_items]

  """
  Lists the internal trades which occurred since the previous point in time.
  """
  internal_trades: [getContractHistory_items_internal_trades_items]
}

type getContractHistory_items_internal_trades_items {
  internal_trade_id: String

  """
  If you sold energy with this trade, delivery_area will contain the sell_delivery_area, otherwise the buy_delivery_area
  """
  delivery_area: String

  """The timestamp when the trade was executed (UTC time zone)"""
  exec_time: String
  api_timestamp: String

  """
  the order_id of the underlying buy-order. If the internal trade was matched with a new order, the id remains empty.
  """
  buy_order_id: String

  """the client order id of the buy order"""
  buy_clOrderId: String

  """the custom text of the buy order"""
  buy_txt: String

  """
  Indicates whether the executed order was a trade aggressor or trade originator.  
  * Y - Trade aggressor
  * N - Trade originator
  * U - Unknown, for executed orders of remote products and data before migration    
  """
  buy_aggressor_indicator: String

  """
  The seller's order id. If the internal trade was matched with a new order, the id remains empty.
  """
  sell_order_id: String

  """The sell order's client id"""
  sell_clOrderId: String

  """The sell order's custom text"""
  sell_txt: String

  """
  Indicates whether the executed order was a trade aggressor or trade originator.  
  * Y - Trade aggressor
  * N - Trade originator
  * U - Unknown, for executed orders of remote products and data before migration    
  """
  sell_aggressor_indicator: String

  """The contract_id against which the trade was executed"""
  contract_id: String

  """The contract's name against which the trade was executed."""
  contract_name: String

  """Time when the delivery of this trade starts (UTC timezone)"""
  delivery_start: String

  """Time when the delivery of this trade ends (UTC timezone)"""
  delivery_end: String

  """Price of the trade"""
  price: Float

  """Quantity in MW of the trade"""
  quantity: Float

  """Product ID"""
  prod: String
}

type getContractHistory_items_signals_items {
  """
  The unique id of the signal (within the namespace of the emitting source)
  """
  id: String

  """The identifier of the system which emitted the signal"""
  source: String

  """The timestamp when the signal was received by PowerBot"""
  received_at: String

  """
  The number of times the signal has been updated. If the signal has never received any updates, then revision is 0.
  """
  revision: Int

  """
  Together with delivery_start and delivery_end specify the delivery period in which the signal is valid
  """
  delivery_start: String

  """
  Together with delivery_start and delivery_end specify the delivery period in which the signal is valid
  """
  delivery_end: String

  """The content of the signal"""
  value: getContractHistory_items_signals_items_value
}

"""The content of the signal"""
type getContractHistory_items_signals_items_value {
  """default field"""
  empty: String
}

type getContractHistory_items_trades_items {
  """Unique trade_id"""
  trade_id: String

  """
  * CNCL: Trade was cancelled by market operations.
  * RREJ: Requested Recall was rejected by market operations.
  * RGRA: Requested Recall was granted by market operations.
  * RREQ: Recall of this trade was requested.
  * ACTI: Trade is active (this is the default value).
  * CREQ: cancel was requested from local market operations. 
  * CREJ: cancel was rejected by global market operations.
  * RSFA: Request sent for approval to SOB (XBID).
  """
  state: String

  """
  If you sold energy with this trade, delivery_area will contain the sell_delivery_area, otherwise the buy_delivery_area
  """
  delivery_area: String

  """The timestamp when powerbot received the trade (UTC time zone)"""
  api_timestamp: String

  """The timestamp when the trade was executed (UTC time zone)"""
  exec_time: String

  """true if you bought energy"""
  buy: Boolean

  """true if you sold energy"""
  sell: Boolean

  """the order_id of the underlying buy-order"""
  buy_order_id: String

  """The delivery area of the buy-side of the trade."""
  buy_delivery_area: String

  """the client order id of the buy order"""
  buy_clOrderId: String

  """the custom text of the buy order"""
  buy_txt: String

  """the buyer's epex user code"""
  buy_user_code: String

  """the buyer's epex member id"""
  buy_member_id: String

  """
  Indicates whether the executed order was a trade aggressor or trade originator.  
  * Y - Trade aggressor
  * N - Trade originator
  * U - Unknown, for executed orders of remote products and data before migration    
  """
  buy_aggressor_indicator: String

  """The seller's order id"""
  sell_order_id: String

  """delivery area of the sell order"""
  sell_delivery_area: String

  """The sell order's client id"""
  sell_clOrderId: String

  """The sell order's custom text"""
  sell_txt: String

  """The seller's epex user code"""
  sell_user_code: String

  """The seller's epex member id"""
  sell_member_id: String

  """
  Indicates whether the executed order was a trade aggressor or trade originator.  
  * Y - Trade aggressor
  * N - Trade originator
  * U - Unknown, for executed orders of remote products and data before migration    
  """
  sell_aggressor_indicator: String

  """The contract_id against which the trade was executed"""
  contract_id: String

  """The contract's name against which the trade was executed."""
  contract_name: String

  """Time when the delivery of this trade starts (UTC timezone)"""
  delivery_start: String

  """Time when the delivery of this trade ends (UTC timezone)"""
  delivery_end: String

  """Price of the trade"""
  price: Float

  """Quantity in MW of the trade"""
  quantity: Float

  """
  Details of the trade provided by EPEX, Please consult the "DFS180 - M7 - Public Message Interface" for details.
  """
  trade_details: getContractHistory_items_trades_items_trade_details

  """
  Details of the trade provided by EPEX, Please consult the "DFS180 - M7 - Public Message Interface" for details.
  """
  contract_details: getContractHistory_items_trades_items_contract_details
}

"""
Details of the trade provided by EPEX, Please consult the "DFS180 - M7 - Public Message Interface" for details.
"""
type getContractHistory_items_trades_items_contract_details {
  """default field"""
  empty: String
}

"""
Details of the trade provided by EPEX, Please consult the "DFS180 - M7 - Public Message Interface" for details.
"""
type getContractHistory_items_trades_items_trade_details {
  """default field"""
  empty: String
}

type getInternalTrades_items {
  internal_trade_id: String

  """
  If you sold energy with this trade, delivery_area will contain the sell_delivery_area, otherwise the buy_delivery_area
  """
  delivery_area: String

  """The timestamp when the trade was executed (UTC time zone)"""
  exec_time: String
  api_timestamp: String

  """
  the order_id of the underlying buy-order. If the internal trade was matched with a new order, the id remains empty.
  """
  buy_order_id: String

  """the client order id of the buy order"""
  buy_clOrderId: String

  """the custom text of the buy order"""
  buy_txt: String

  """
  Indicates whether the executed order was a trade aggressor or trade originator.  
  * Y - Trade aggressor
  * N - Trade originator
  * U - Unknown, for executed orders of remote products and data before migration    
  """
  buy_aggressor_indicator: String

  """
  The seller's order id. If the internal trade was matched with a new order, the id remains empty.
  """
  sell_order_id: String

  """The sell order's client id"""
  sell_clOrderId: String

  """The sell order's custom text"""
  sell_txt: String

  """
  Indicates whether the executed order was a trade aggressor or trade originator.  
  * Y - Trade aggressor
  * N - Trade originator
  * U - Unknown, for executed orders of remote products and data before migration    
  """
  sell_aggressor_indicator: String

  """The contract_id against which the trade was executed"""
  contract_id: String

  """The contract's name against which the trade was executed."""
  contract_name: String

  """Time when the delivery of this trade starts (UTC timezone)"""
  delivery_start: String

  """Time when the delivery of this trade ends (UTC timezone)"""
  delivery_end: String

  """Price of the trade"""
  price: Float

  """Quantity in MW of the trade"""
  quantity: Float

  """Product ID"""
  prod: String
}

type getLogs_items {
  """The unique id of the log entry"""
  id: String

  """
  The timestamp when the powerbot trading API has received the log entry. UTC timezone is used.
  """
  received: String

  """The content of your log entry"""
  text: String!

  """
  Should be set to the time (UTC) when the log entry was emitted by your system
  """
  as_of: String!

  """An optional category of the log entry"""
  category: String

  """The severity of the log entry"""
  severity: String
}

type getMessages_items {
  message_id: String
  api_timestamp: String
  category: String
  message_class: String
  content_type: String
  correlation_id: String
  direction: String
  group_id: String
  group_sequence: String
  content: getMessages_items_content
}

type getMessages_items_content {
  """default field"""
  empty: String
}

type getNotifications_items {
  msg_id: String
  type: String
  code: Int
  epex_timestamp: String
  api_timestamp: String
  text: String
  severity: String
}

type getOrderBook {
  """The orderbook's product"""
  product: String

  """The product's details (as delivered by the backend)"""
  product_details: getOrderBook_product_details

  """The delivery area of the order book"""
  delivery_area: String

  """the price currency of the underlying contracts"""
  price_currency: String

  """the quantity unit of the underlying contracts"""
  quantity_unit: String

  """The contracts of the orderbook"""
  contracts: [getOrderBook_contracts_items]
}

type getOrderBook_contracts_items {
  """the contract's product"""
  product: String

  """The contract's unique id"""
  contract_id: String

  """State of the contract"""
  state: String

  """The name of the contract"""
  name: String

  """
  Delivery unit of the respective product. In case of product with type
  User-Defined Delivery Period this attribute is stored only with contract.
  """
  delUnits: Float

  """
  A running number starting at 0; Every time the contract changes (i.e. a trade is made), this number increments.
  """
  revision_no: String

  """The delivery start time (UTC) of the contract"""
  delivery_start: String

  """The delivery end time (UTC) of the contract"""
  delivery_end: String

  """The best bid's price in the orderbook's currency (i.e. EUR)"""
  best_bid_price: Float

  """The best bid's quantity in the orderbook's quantity unit (i.e. MW)"""
  best_bid_quantity: Float

  """The best asks's price in the orderbook's currency (i.e. EUR)"""
  best_ask_price: Float

  """The best asks's quantity in the orderbook's quantity unit (i.e. MW)"""
  best_ask_quantity: Float

  """The price of the last trade (in the orderbook's currency)"""
  last_price: Float

  """The quantity of the last trade (in the orderbook's quantity unit)"""
  last_quantity: Float

  """The total volume of all trades (in the orderbook's quantity unit)"""
  total_quantity: Float
  auction_price: Float

  """Highest traded price since the start of the trading period."""
  high: Float

  """Lowest traded price since the start of the trading period"""
  low: Float

  """All contract details (as delivered from the backend system)"""
  contract_details: getOrderBook_contracts_items_contract_details

  """All orderbook details (as delivered from the backend system)"""
  orderbook_details: getOrderBook_contracts_items_orderbook_details

  """Your relative position in the contract"""
  relative_position: Float

  """Your absolute position in the contract"""
  absolute_position: Float
  last_trade_time: String

  """The signals applicable for the contract"""
  signals: [getOrderBook_contracts_items_signals_items]

  """The volume weighted average"""
  vwap: Float

  """otr ratio"""
  otr: Float

  """Ask volume weighted average"""
  avwa: Float

  """Bid volume weighted average"""
  bvwa: Float
}

"""All contract details (as delivered from the backend system)"""
type getOrderBook_contracts_items_contract_details {
  """default field"""
  empty: String
}

"""All orderbook details (as delivered from the backend system)"""
type getOrderBook_contracts_items_orderbook_details {
  """default field"""
  empty: String
}

type getOrderBook_contracts_items_signals_items {
  """
  The unique id of the signal (within the namespace of the emitting source)
  """
  id: String

  """The identifier of the system which emitted the signal"""
  source: String

  """The timestamp when the signal was received by PowerBot"""
  received_at: String

  """
  The number of times the signal has been updated. If the signal has never received any updates, then revision is 0.
  """
  revision: Int

  """
  Together with delivery_start and delivery_end specify the delivery period in which the signal is valid
  """
  delivery_start: String

  """
  Together with delivery_start and delivery_end specify the delivery period in which the signal is valid
  """
  delivery_end: String

  """The content of the signal"""
  value: getOrderBook_contracts_items_signals_items_value
}

"""The content of the signal"""
type getOrderBook_contracts_items_signals_items_value {
  """default field"""
  empty: String
}

"""The product's details (as delivered by the backend)"""
type getOrderBook_product_details {
  """default field"""
  empty: String
}

type getOrderBooks {
  """The involved products of the orderbooks"""
  products: [getOrderBooks_products_items]

  """The contracts of the orderbooks"""
  contracts: [getOrderBooks_contracts_items]
}

type getOrderBooks_contracts_items {
  """the contract's product"""
  product: String

  """The contract's unique id"""
  contract_id: String

  """State of the contract"""
  state: String

  """The name of the contract"""
  name: String

  """
  Delivery unit of the respective product. In case of product with type
  User-Defined Delivery Period this attribute is stored only with contract.
  """
  delUnits: Float

  """
  A running number starting at 0; Every time the contract changes (i.e. a trade is made), this number increments.
  """
  revision_no: String

  """The delivery start time (UTC) of the contract"""
  delivery_start: String

  """The delivery end time (UTC) of the contract"""
  delivery_end: String

  """The best bid's price in the orderbook's currency (i.e. EUR)"""
  best_bid_price: Float

  """The best bid's quantity in the orderbook's quantity unit (i.e. MW)"""
  best_bid_quantity: Float

  """The best asks's price in the orderbook's currency (i.e. EUR)"""
  best_ask_price: Float

  """The best asks's quantity in the orderbook's quantity unit (i.e. MW)"""
  best_ask_quantity: Float

  """The price of the last trade (in the orderbook's currency)"""
  last_price: Float

  """The quantity of the last trade (in the orderbook's quantity unit)"""
  last_quantity: Float

  """The total volume of all trades (in the orderbook's quantity unit)"""
  total_quantity: Float
  auction_price: Float

  """Highest traded price since the start of the trading period."""
  high: Float

  """Lowest traded price since the start of the trading period"""
  low: Float

  """All contract details (as delivered from the backend system)"""
  contract_details: getOrderBooks_contracts_items_contract_details

  """All orderbook details (as delivered from the backend system)"""
  orderbook_details: getOrderBooks_contracts_items_orderbook_details

  """Your relative position in the contract"""
  relative_position: Float

  """Your absolute position in the contract"""
  absolute_position: Float
  last_trade_time: String

  """The signals applicable for the contract"""
  signals: [getOrderBooks_contracts_items_signals_items]

  """The volume weighted average"""
  vwap: Float

  """otr ratio"""
  otr: Float

  """Ask volume weighted average"""
  avwa: Float

  """Bid volume weighted average"""
  bvwa: Float
}

"""All contract details (as delivered from the backend system)"""
type getOrderBooks_contracts_items_contract_details {
  """default field"""
  empty: String
}

"""All orderbook details (as delivered from the backend system)"""
type getOrderBooks_contracts_items_orderbook_details {
  """default field"""
  empty: String
}

type getOrderBooks_contracts_items_signals_items {
  """
  The unique id of the signal (within the namespace of the emitting source)
  """
  id: String

  """The identifier of the system which emitted the signal"""
  source: String

  """The timestamp when the signal was received by PowerBot"""
  received_at: String

  """
  The number of times the signal has been updated. If the signal has never received any updates, then revision is 0.
  """
  revision: Int

  """
  Together with delivery_start and delivery_end specify the delivery period in which the signal is valid
  """
  delivery_start: String

  """
  Together with delivery_start and delivery_end specify the delivery period in which the signal is valid
  """
  delivery_end: String

  """The content of the signal"""
  value: getOrderBooks_contracts_items_signals_items_value
}

"""The content of the signal"""
type getOrderBooks_contracts_items_signals_items_value {
  """default field"""
  empty: String
}

type getOrderBooks_products_items {
  """Name of the product"""
  product_name: String

  """The delivery area of the orderbook's product"""
  delivery_area: String

  """the price currency of the underlying contracts"""
  price_currency: String

  """the quantity unit of the underlying contracts"""
  quantity_unit: String
}

type getOrders {
  bid: [getOrders_bid_items]
  ask: [getOrders_ask_items]
}

type getOrders_ask_items {
  order_id: String
  delivery_area: String
  contract_id: String
  order_entry_time: String
  price: Float
  quantity: Float
}

type getOrders_bid_items {
  order_id: String
  delivery_area: String
  contract_id: String
  order_entry_time: String
  price: Float
  quantity: Float
}

type getOwnOrders_items {
  """
  the unique id of the order. **Note** if you modify an order, the id will change!
  """
  order_id: String

  """the time (UTC) when Powerbot received the last update of the order"""
  api_timestamp: String

  """
  The current state of the order in the system. 
  * HIBE: The order is entered into the backend system but not exposed to the market.
  * ACTI: The order is entered and immediately exposed to the market for execution.
  * IACT: The order is deleted.
  """
  state: String

  """Defines the delivery area of the order."""
  delivery_area: String
  last_change_timestamp: String

  """Set to true if the order is a BUY order, false otherwise"""
  buy: Boolean

  """set to true if the order is a SELL order, false otherwise"""
  sell: Boolean
  side: String

  """The contract_id of the order's underlying contract"""
  contract_id: String

  """The contract name of the order's underlying contract"""
  contract_name: String

  """the delivery start of the underlying contract."""
  delivery_start: String

  """the delivery end of the underlying contract."""
  delivery_end: String

  """The client's order number (if set during the placement of the order)"""
  clOrdrId: String

  """The client's custom text (if set during the placement of the order)"""
  txt: String

  """The price of the order in the contract's currency (usually EUR)"""
  price: Float

  """
  The quantity of the order (in the contract's quantity unit - usually MW)
  """
  quantity: Float

  """
  The action which has been carried out for the order
  * UADD: Order added by user.
  * UHIB: Order deactivated by user.
  * UMOD: Order modified by user.
  * UDEL: Order deleted by user.
  * UREJ: Pre-arranged order rejected by user.
  * AADD: Order added by market operations on behalf.
  * AHIB: Order deactivated by market operations on behalf. “AMOD”: Order modified by market operations on behalf.
  * ADEL: Order deleted by market operations on behalf.
  * AREJ: Pre-arranged order rejected by market operations on behalf.
  * SADD: Order added by the system.
  * SHIB: Order deactivated by the system. “SMOD”: Order modified by the system. “SDEL”: Order deleted by the system.
  * SREJ: Pre-arranged order rejected by system.
  * FEXE: Order is fully executed.
  * PEXE: Partial execution of order.
  * IADD: A new slice of an Iceberg order was added to the service.
  * QADD: Quote was added
  * QFEX: Quote was fully executed
  """
  action: String

  """
  All details of the order (as received from the underlying backend system)
  """
  details: getOwnOrders_items_details

  """the epex user code"""
  user_code: String
}

"""
All details of the order (as received from the underlying backend system)
"""
type getOwnOrders_items_details {
  """default field"""
  empty: String
}

type getPublicTrades_items {
  """the uniqe id of the public trade"""
  trade_id: String
  buy_delivery_area: String
  sell_delivery_area: String

  """
  The timestamp (UTC) when Powerbot has received the information of the backend system
  """
  api_timestamp: String

  """The timestamp (UTC) when the public trade was executed"""
  exec_time: String

  """The id of the contract on which the public trade was executed"""
  contract_id: String

  """
  The price (usually in EUR, but depends on the contract) of the public trade
  """
  price: Float

  """
  The quantity (usually in MW, but depends on the contract) of the public trade
  """
  quantity: Float
}

type getSignals_items {
  """
  The unique id of the signal (within the namespace of the emitting source)
  """
  id: String

  """The identifier of the system which emitted the signal"""
  source: String

  """The timestamp when the signal was received by PowerBot"""
  received_at: String

  """
  The number of times the signal has been updated. If the signal has never received any updates, then revision is 0.
  """
  revision: Int

  """
  Together with delivery_start and delivery_end specify the delivery period in which the signal is valid
  """
  delivery_start: String

  """
  Together with delivery_start and delivery_end specify the delivery period in which the signal is valid
  """
  delivery_end: String

  """The content of the signal"""
  value: getSignals_items_value
}

"""The content of the signal"""
type getSignals_items_value {
  """default field"""
  empty: String
}

type getStatus {
  """The timestamp when the status of the market was last checked."""
  api_timestamp: String

  """
  The current state of the market
  * OK Everyhting's ok, trading is possible
  * WARNING Trading might not be possible, check the messages.
  * FAILURE Trading is not possible right now.        
  """
  status: String!
  options: getStatus_options

  """The urls of EPEX's backand system Powerbot is connected to"""
  urls: [String]

  """EPEX products which powerbot is linked with"""
  products: [String]

  """The market powerbot is configured to operate in"""
  market_area_id: String

  """The delivery areay powerbot is configured to operate in"""
  delivery_area_id: String

  """The available delivery areas"""
  available_delivery_area_ids: [String]

  """The current session id"""
  session_id: String

  """
  The timstamp (UTC) since when Powerbot has logged-into the backend system
  """
  logged_in_since: String

  """
  The timestamp when the last heartbeat of the backend system has been received (should be not older than 5 seconds)
  """
  heartbeat_as_of: String

  """The content of the last heartbeat"""
  heartbeat_content: String

  """Messages explaining the state of the market"""
  messages: [String]
}

type getStatus_options {
  """Releative position limt (per contract)  in MW"""
  relative_position_limit: Int

  """Absolute position limt (per contract)  in MW"""
  absolute_position_limit: Int
  internal_trading: String

  """
  In multi-area configurations, set this option in case you want a default delivery area
  """
  default_delivery_area_id: String
}

type getTrades_items {
  """Unique trade_id"""
  trade_id: String

  """
  * CNCL: Trade was cancelled by market operations.
  * RREJ: Requested Recall was rejected by market operations.
  * RGRA: Requested Recall was granted by market operations.
  * RREQ: Recall of this trade was requested.
  * ACTI: Trade is active (this is the default value).
  * CREQ: cancel was requested from local market operations. 
  * CREJ: cancel was rejected by global market operations.
  * RSFA: Request sent for approval to SOB (XBID).
  """
  state: String

  """
  If you sold energy with this trade, delivery_area will contain the sell_delivery_area, otherwise the buy_delivery_area
  """
  delivery_area: String

  """The timestamp when powerbot received the trade (UTC time zone)"""
  api_timestamp: String

  """The timestamp when the trade was executed (UTC time zone)"""
  exec_time: String

  """true if you bought energy"""
  buy: Boolean

  """true if you sold energy"""
  sell: Boolean

  """the order_id of the underlying buy-order"""
  buy_order_id: String

  """The delivery area of the buy-side of the trade."""
  buy_delivery_area: String

  """the client order id of the buy order"""
  buy_clOrderId: String

  """the custom text of the buy order"""
  buy_txt: String

  """the buyer's epex user code"""
  buy_user_code: String

  """the buyer's epex member id"""
  buy_member_id: String

  """
  Indicates whether the executed order was a trade aggressor or trade originator.  
  * Y - Trade aggressor
  * N - Trade originator
  * U - Unknown, for executed orders of remote products and data before migration    
  """
  buy_aggressor_indicator: String

  """The seller's order id"""
  sell_order_id: String

  """delivery area of the sell order"""
  sell_delivery_area: String

  """The sell order's client id"""
  sell_clOrderId: String

  """The sell order's custom text"""
  sell_txt: String

  """The seller's epex user code"""
  sell_user_code: String

  """The seller's epex member id"""
  sell_member_id: String

  """
  Indicates whether the executed order was a trade aggressor or trade originator.  
  * Y - Trade aggressor
  * N - Trade originator
  * U - Unknown, for executed orders of remote products and data before migration    
  """
  sell_aggressor_indicator: String

  """The contract_id against which the trade was executed"""
  contract_id: String

  """The contract's name against which the trade was executed."""
  contract_name: String

  """Time when the delivery of this trade starts (UTC timezone)"""
  delivery_start: String

  """Time when the delivery of this trade ends (UTC timezone)"""
  delivery_end: String

  """Price of the trade"""
  price: Float

  """Quantity in MW of the trade"""
  quantity: Float

  """
  Details of the trade provided by EPEX, Please consult the "DFS180 - M7 - Public Message Interface" for details.
  """
  trade_details: getTrades_items_trade_details

  """
  Details of the trade provided by EPEX, Please consult the "DFS180 - M7 - Public Message Interface" for details.
  """
  contract_details: getTrades_items_contract_details
}

"""
Details of the trade provided by EPEX, Please consult the "DFS180 - M7 - Public Message Interface" for details.
"""
type getTrades_items_contract_details {
  """default field"""
  empty: String
}

"""
Details of the trade provided by EPEX, Please consult the "DFS180 - M7 - Public Message Interface" for details.
"""
type getTrades_items_trade_details {
  """default field"""
  empty: String
}

type login {
  """The timestamp when the status of the market was last checked."""
  api_timestamp: String

  """
  The current state of the market
  * OK Everyhting's ok, trading is possible
  * WARNING Trading might not be possible, check the messages.
  * FAILURE Trading is not possible right now.        
  """
  status: String!
  options: login_options

  """The urls of EPEX's backand system Powerbot is connected to"""
  urls: [String]

  """EPEX products which powerbot is linked with"""
  products: [String]

  """The market powerbot is configured to operate in"""
  market_area_id: String

  """The delivery areay powerbot is configured to operate in"""
  delivery_area_id: String

  """The available delivery areas"""
  available_delivery_area_ids: [String]

  """The current session id"""
  session_id: String

  """
  The timstamp (UTC) since when Powerbot has logged-into the backend system
  """
  logged_in_since: String

  """
  The timestamp when the last heartbeat of the backend system has been received (should be not older than 5 seconds)
  """
  heartbeat_as_of: String

  """The content of the last heartbeat"""
  heartbeat_content: String

  """Messages explaining the state of the market"""
  messages: [String]
}

type login_options {
  """Releative position limt (per contract)  in MW"""
  relative_position_limit: Int

  """Absolute position limt (per contract)  in MW"""
  absolute_position_limit: Int
  internal_trading: String

  """
  In multi-area configurations, set this option in case you want a default delivery area
  """
  default_delivery_area_id: String
}

type logout {
  """The timestamp when the status of the market was last checked."""
  api_timestamp: String

  """
  The current state of the market
  * OK Everyhting's ok, trading is possible
  * WARNING Trading might not be possible, check the messages.
  * FAILURE Trading is not possible right now.        
  """
  status: String!
  options: logout_options

  """The urls of EPEX's backand system Powerbot is connected to"""
  urls: [String]

  """EPEX products which powerbot is linked with"""
  products: [String]

  """The market powerbot is configured to operate in"""
  market_area_id: String

  """The delivery areay powerbot is configured to operate in"""
  delivery_area_id: String

  """The available delivery areas"""
  available_delivery_area_ids: [String]

  """The current session id"""
  session_id: String

  """
  The timstamp (UTC) since when Powerbot has logged-into the backend system
  """
  logged_in_since: String

  """
  The timestamp when the last heartbeat of the backend system has been received (should be not older than 5 seconds)
  """
  heartbeat_as_of: String

  """The content of the last heartbeat"""
  heartbeat_content: String

  """Messages explaining the state of the market"""
  messages: [String]
}

type logout_options {
  """Releative position limt (per contract)  in MW"""
  relative_position_limit: Int

  """Absolute position limt (per contract)  in MW"""
  absolute_position_limit: Int
  internal_trading: String

  """
  In multi-area configurations, set this option in case you want a default delivery area
  """
  default_delivery_area_id: String
}

type modifyOrder_items {
  """
  the unique id of the order. **Note** if you modify an order, the id will change!
  """
  order_id: String

  """the time (UTC) when Powerbot received the last update of the order"""
  api_timestamp: String

  """
  The current state of the order in the system. 
  * HIBE: The order is entered into the backend system but not exposed to the market.
  * ACTI: The order is entered and immediately exposed to the market for execution.
  * IACT: The order is deleted.
  """
  state: String

  """Defines the delivery area of the order."""
  delivery_area: String
  last_change_timestamp: String

  """Set to true if the order is a BUY order, false otherwise"""
  buy: Boolean

  """set to true if the order is a SELL order, false otherwise"""
  sell: Boolean
  side: String

  """The contract_id of the order's underlying contract"""
  contract_id: String

  """The contract name of the order's underlying contract"""
  contract_name: String

  """the delivery start of the underlying contract."""
  delivery_start: String

  """the delivery end of the underlying contract."""
  delivery_end: String

  """The client's order number (if set during the placement of the order)"""
  clOrdrId: String

  """The client's custom text (if set during the placement of the order)"""
  txt: String

  """The price of the order in the contract's currency (usually EUR)"""
  price: Float

  """
  The quantity of the order (in the contract's quantity unit - usually MW)
  """
  quantity: Float

  """
  The action which has been carried out for the order
  * UADD: Order added by user.
  * UHIB: Order deactivated by user.
  * UMOD: Order modified by user.
  * UDEL: Order deleted by user.
  * UREJ: Pre-arranged order rejected by user.
  * AADD: Order added by market operations on behalf.
  * AHIB: Order deactivated by market operations on behalf. “AMOD”: Order modified by market operations on behalf.
  * ADEL: Order deleted by market operations on behalf.
  * AREJ: Pre-arranged order rejected by market operations on behalf.
  * SADD: Order added by the system.
  * SHIB: Order deactivated by the system. “SMOD”: Order modified by the system. “SDEL”: Order deleted by the system.
  * SREJ: Pre-arranged order rejected by system.
  * FEXE: Order is fully executed.
  * PEXE: Partial execution of order.
  * IADD: A new slice of an Iceberg order was added to the service.
  * QADD: Quote was added
  * QFEX: Quote was fully executed
  """
  action: String

  """
  All details of the order (as received from the underlying backend system)
  """
  details: modifyOrder_items_details

  """the epex user code"""
  user_code: String
}

"""
All details of the order (as received from the underlying backend system)
"""
type modifyOrder_items_details {
  """default field"""
  empty: String
}

type Mutation {
  """
  Use this method to generate a new api_key for your trading algorithm, signal import, etc. 
  Requires that you are authenticated with your master api_key which you'll get once your private 
  Powerbot trading access has been configured.
  """
  addApiKey(value: param_addApiKey_valueInput!): addApiKey

  """
  The Powerbot Trading api helps you to record what your algorithm is doing. You
  can use this method to log the activity of your trading algorithm. These logs
  can be retrieved later
  by you or displayed by the Powerbot GUI.
  """
  addLogEntry(value: param_addLogEntry_valueInput!): addLogEntry
  updateSignal(source: String!, id: String!, delivery_start: String, delivery_end: String, value: param_updateSignal_valueInput!): updateSignal
  updateSignals(value: param_updateSignals_valueInput!): [updateSignals_items]
  addInternalTrade(NewInternalTrade: param_addInternalTrade_NewInternalTradeInput!): addInternalTrade

  """
  Attempts to recall a trade. Note that this may fail depending on the
  conditions set by Market operations. Check the trade's state after
  attempting to recall a trade.
  """
  recallTrade(trade_id: String!): [recallTrade_items]

  """Allows you to place a new sell or bid order. """
  addOrder(internal_trading: Boolean, order: param_addOrder_orderInput!): addOrder

  """
  Allows you to place a new sell or bid orders. For each requested order one
  response is generated. In case of sucess, the order is returned otherwise an
  error message is returned.
  """
  addOrders(exec_instruction: String, internal_trading: Boolean, order: param_addOrders_orderInput!): [addOrders_items]
  updateStatus(orders: param_updateStatus_ordersInput!): updateStatus

  """Changes, activates or deactivates an existing order"""
  modifyOrder(order_id: String!, modifications: param_modifyOrder_modificationsInput): [modifyOrder_items]
  login(Credentials: param_login_CredentialsInput!): login
  logout: logout
  setMarketOptions(Credentials: param_setMarketOptions_CredentialsInput!): setMarketOptions
}

input param_addApiKey_valueInput {
  """default field"""
  empty: String
}

input param_addInternalTrade_NewInternalTradeInput {
  """default field"""
  empty: String
}

input param_addLogEntry_valueInput {
  """default field"""
  empty: String
}

input param_addOrder_orderInput {
  """default field"""
  empty: String
}

input param_addOrders_orderInput {
  """default field"""
  empty: String
}

input param_login_CredentialsInput {
  """default field"""
  empty: String
}

input param_modifyOrder_modificationsInput {
  """default field"""
  empty: String
}

input param_setMarketOptions_CredentialsInput {
  """default field"""
  empty: String
}

"""
Signal payload. Will accept any valid json. Set the "delivery_start" and the
"delivery_end" attributes to a valid delivery period for a contract of an order book, 
and the order book will return you your previously submitted signals. This is
then typically used by trading algorithms to determine if, for instance, a
position should
be closed. You can either submit these attributes as part of signal, or as query parameters.
"""
input param_updateSignal_valueInput {
  """default field"""
  empty: String
}

"""Signals payload"""
input param_updateSignals_valueInput {
  """default field"""
  empty: String
}

input param_updateStatus_ordersInput {
  """default field"""
  empty: String
}

type Query {
  """
  Retrieves log entries which you have submitted earlier with 'addLogEntry'
  """
  getLogs(offset: Int, limit: Int, severity_at_least: String, received_from: String, received_to: String): [getLogs_items]
  getSignals(offset: Int, limit: Int, received_from: String, received_to: String): [getSignals_items]
  getInternalTrades(offset: Int, limit: Int, contract_id: String, from_execution_time: String, to_execution_time: String, from_api_timestamp: String, to_api_timestamp: String, delivery_within_start: String, delivery_within_end: String, delivery_area: String): [getInternalTrades_items]
  getTrades(offset: Int, limit: Int, ordId: String, active_only: Boolean, clOrdrId: String, txt: String, contract_id: String, from_api_timestamp: String, to_api_timestamp: String, delivery_within_start: String, delivery_within_end: String, delivery_area: String, user_code: String): [getTrades_items]
  getOwnOrders(offset: Int, limit: Int, contract_id: String, active_only: Boolean, delivery_area: String, user_code: String): [getOwnOrders_items]
  getContractHistory(contract_id: String!, delivery_area: String, from_revision: String, with_details: Boolean): [getContractHistory_items]
  getPublicTrades(offset: Int, limit: Int, contract_id: String!, delivery_area: String, from_api_timestamp: String, to_api_timestamp: String): [getPublicTrades_items]
  getOrders(contract_id: String!, delivery_area: String): getOrders
  findContracts(contract_id: String, delivery_start: String, delivery_end: String): [findContracts_items]

  """
  Shows the public order books for the requested products (or all available products)
  """
  getOrderBooks(product: String, with_bid_or_ask_only: Boolean, contractId: String, contractName: String, delivery_start: String, delivery_end: String, delivery_within: String, past_hours: Int, delivery_area: String, with_details: Boolean, limit: Int): getOrderBooks

  """
  Shows the public order book for the selected product containing the active bids/asks and the applicable signals
  """
  getOrderBook(product: String!, with_bid_or_ask_only: Boolean, contractId: String, contractName: String, delivery_start: String, delivery_end: String, delivery_within: String, past_hours: Int, delivery_area: String, with_details: Boolean, limit: Int): getOrderBook
  getStatus: getStatus
  getNotifications(offset: Int, limit: Int, severity_at_least: String, from_api_timestamp: String, to_api_timestamp: String): [getNotifications_items]
  getMessages(offset: Int, limit: Int, from_api_timestamp: String, to_api_timestamp: String, message_class_is: String, message_class_is_not: String, correlation_id: String, sort_by: String): [getMessages_items]
}

type recallTrade_items {
  """Unique trade_id"""
  trade_id: String

  """
  * CNCL: Trade was cancelled by market operations.
  * RREJ: Requested Recall was rejected by market operations.
  * RGRA: Requested Recall was granted by market operations.
  * RREQ: Recall of this trade was requested.
  * ACTI: Trade is active (this is the default value).
  * CREQ: cancel was requested from local market operations. 
  * CREJ: cancel was rejected by global market operations.
  * RSFA: Request sent for approval to SOB (XBID).
  """
  state: String

  """
  If you sold energy with this trade, delivery_area will contain the sell_delivery_area, otherwise the buy_delivery_area
  """
  delivery_area: String

  """The timestamp when powerbot received the trade (UTC time zone)"""
  api_timestamp: String

  """The timestamp when the trade was executed (UTC time zone)"""
  exec_time: String

  """true if you bought energy"""
  buy: Boolean

  """true if you sold energy"""
  sell: Boolean

  """the order_id of the underlying buy-order"""
  buy_order_id: String

  """The delivery area of the buy-side of the trade."""
  buy_delivery_area: String

  """the client order id of the buy order"""
  buy_clOrderId: String

  """the custom text of the buy order"""
  buy_txt: String

  """the buyer's epex user code"""
  buy_user_code: String

  """the buyer's epex member id"""
  buy_member_id: String

  """
  Indicates whether the executed order was a trade aggressor or trade originator.  
  * Y - Trade aggressor
  * N - Trade originator
  * U - Unknown, for executed orders of remote products and data before migration    
  """
  buy_aggressor_indicator: String

  """The seller's order id"""
  sell_order_id: String

  """delivery area of the sell order"""
  sell_delivery_area: String

  """The sell order's client id"""
  sell_clOrderId: String

  """The sell order's custom text"""
  sell_txt: String

  """The seller's epex user code"""
  sell_user_code: String

  """The seller's epex member id"""
  sell_member_id: String

  """
  Indicates whether the executed order was a trade aggressor or trade originator.  
  * Y - Trade aggressor
  * N - Trade originator
  * U - Unknown, for executed orders of remote products and data before migration    
  """
  sell_aggressor_indicator: String

  """The contract_id against which the trade was executed"""
  contract_id: String

  """The contract's name against which the trade was executed."""
  contract_name: String

  """Time when the delivery of this trade starts (UTC timezone)"""
  delivery_start: String

  """Time when the delivery of this trade ends (UTC timezone)"""
  delivery_end: String

  """Price of the trade"""
  price: Float

  """Quantity in MW of the trade"""
  quantity: Float

  """
  Details of the trade provided by EPEX, Please consult the "DFS180 - M7 - Public Message Interface" for details.
  """
  trade_details: recallTrade_items_trade_details

  """
  Details of the trade provided by EPEX, Please consult the "DFS180 - M7 - Public Message Interface" for details.
  """
  contract_details: recallTrade_items_contract_details
}

"""
Details of the trade provided by EPEX, Please consult the "DFS180 - M7 - Public Message Interface" for details.
"""
type recallTrade_items_contract_details {
  """default field"""
  empty: String
}

"""
Details of the trade provided by EPEX, Please consult the "DFS180 - M7 - Public Message Interface" for details.
"""
type recallTrade_items_trade_details {
  """default field"""
  empty: String
}

type setMarketOptions {
  """The timestamp when the status of the market was last checked."""
  api_timestamp: String

  """
  The current state of the market
  * OK Everyhting's ok, trading is possible
  * WARNING Trading might not be possible, check the messages.
  * FAILURE Trading is not possible right now.        
  """
  status: String!
  options: setMarketOptions_options

  """The urls of EPEX's backand system Powerbot is connected to"""
  urls: [String]

  """EPEX products which powerbot is linked with"""
  products: [String]

  """The market powerbot is configured to operate in"""
  market_area_id: String

  """The delivery areay powerbot is configured to operate in"""
  delivery_area_id: String

  """The available delivery areas"""
  available_delivery_area_ids: [String]

  """The current session id"""
  session_id: String

  """
  The timstamp (UTC) since when Powerbot has logged-into the backend system
  """
  logged_in_since: String

  """
  The timestamp when the last heartbeat of the backend system has been received (should be not older than 5 seconds)
  """
  heartbeat_as_of: String

  """The content of the last heartbeat"""
  heartbeat_content: String

  """Messages explaining the state of the market"""
  messages: [String]
}

type setMarketOptions_options {
  """Releative position limt (per contract)  in MW"""
  relative_position_limit: Int

  """Absolute position limt (per contract)  in MW"""
  absolute_position_limit: Int
  internal_trading: String

  """
  In multi-area configurations, set this option in case you want a default delivery area
  """
  default_delivery_area_id: String
}

type updateSignal {
  """default field"""
  empty: String
}

type updateSignals_items {
  id: String
  source: String
  status: String
  status_text: String
}

type updateStatus {
  """default field"""
  empty: String
}

